---
name: Build app
on:
  push:
    paths-ignore:
      - '*.md'
      - 'LICENSE*'
permissions: {}
defaults:
  run:
    shell: cmd
env:
  app_ver: 2024121699
  force_rebuild: true
  winsdk_ver: 10.0.26100.0
  zlib_ver: 2.2.2
  openssl_ver: 3.4.0
  qt_ver: 6.8.1
  boost_ver: 1.87.0
  libtorrent_ver: 20241210
  vcvarsall: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
  CFLAGS: /nologo /arch:AVX2 /Gw /bigobj /utf-8 /JMC- /GS /Gs /guard:cf /guard:ehcont /W0 /O2
  LDFLAGS: /NOLOGO /Brepro /LTCG /OPT:REF,ICF /DEBUG:NONE /RELEASE /DYNAMICBASE /HIGHENTROPYVA /LARGEADDRESSAWARE /NXCOMPAT /CETCOMPAT /GUARD:CF /GUARD:EHCONT
  CLANG: C:\Program Files\LLVM\bin\clang-cl.exe
  CLANG_FLAGS: -fcf-protection=full -flto=full /clang:-fuse-ld=lld /clang:-fstack-protector-strong /clang:-fstrict-flex-arrays=3 /clang:-fno-delete-null-pointer-checks /clang:-ftrivial-auto-var-init=zero

jobs:
  delete-caches:
    name: Delete caches (if on main branch)
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Delete caches
        if: ${{ ( github.ref == 'refs/heads/main' ) && ( env.force_rebuild == 'true' ) }}
        continue-on-error: true
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh cache delete --all --repo ${{ github.repository }}
  build-zlib:
    name: Build zlib
    needs: delete-caches
    runs-on: windows-latest
    steps:
      - name: Cache zlib
        id: cache-zlib
        uses: actions/cache@v4
        with:
          path: zlib
          key: zlib-${{ env.zlib_ver }}-${{ github.ref_name }}
      - name: Install Ninja and LLVM
        if: steps.cache-zlib.outputs.cache-hit != 'true'
        run: |
          choco install --no-progress ninja
          choco upgrade --no-progress llvm
      - name: Build zlib
        if: steps.cache-zlib.outputs.cache-hit != 'true'
        env:
          CC: ${{ env.CLANG }}
          CXX: ${{ env.CLANG }}
          CFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }}
          CXXFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }}
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          curl.exe --output zlib.tar.gz --location "https://github.com/zlib-ng/zlib-ng/archive/refs/tags/${{ env.zlib_ver }}.tar.gz"
          tar xf zlib.tar.gz
          mv zlib-ng-${{ env.zlib_ver }} zlib_build
          cd zlib_build
          cmake . -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_VERSION=${{ env.winsdk_ver }} -DCMAKE_INSTALL_PREFIX="../zlib" ^
            -DZLIB_COMPAT=ON -DZLIB_ENABLE_TESTS=OFF -DZLIBNG_ENABLE_TESTS=OFF -DWITH_GTEST=OFF
          cmake --build .
          cmake --install .
          cd ..
          del zlib\bin\zlib1.dll
          del zlib\lib\zlib.lib
          rd /q /s zlib\lib\cmake
  build-openssl:
    name: Build OpenSSL
    needs: delete-caches
    runs-on: windows-latest
    steps:
      - name: Cache OpenSSL
        id: cache-openssl
        uses: actions/cache@v4
        with:
          path: openssl
          key: openssl-${{ env.openssl_ver }}-${{ github.ref_name }}
      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        env:
          CFLAGS: ${{ env.CFLAGS }} /MP /Zc:preprocessor
          CXXFLAGS: ${{ env.CFLAGS }} /MP /Zc:preprocessor
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          curl.exe --output openssl.tar.gz --location "https://github.com/openssl/openssl/releases/download/openssl-${{ env.openssl_ver }}/openssl-${{ env.openssl_ver }}.tar.gz"
          tar xf openssl.tar.gz
          mv openssl-${{ env.openssl_ver }} openssl_source
          mkdir openssl_build
          cd openssl_build
          perl %GITHUB_WORKSPACE%\openssl_source\Configure VC-WIN64A-masm --release no-apps no-asm no-autoload-config ^
            no-cmp no-cms no-comp no-docs no-dso no-dynamic-engine no-filenames no-gost no-legacy no-makedepend no-module ^
            no-nextprotoneg no-srp no-srtp enable-pie no-ssl-trace no-tests threads no-ssl no-tls1 no-tls1_1 no-dtls1 ^
            no-aria no-camellia no-cast no-md4 no-rmd160 no-sm2 no-sm3 no-sm4 no-whirlpool
          nmake /E /S
      - name: Install OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p openssl/{include,lib}
          mkdir openssl/include/openssl
          mv openssl_source/ms/applink.c openssl/include/openssl/
          mv openssl_source/include/openssl/*.h openssl/include/openssl/
          mv openssl_build/include/openssl/*.h openssl/include/openssl/
          mv openssl_build/libcrypto* openssl/lib/
          mv openssl_build/libssl* openssl/lib/
          find openssl/
  build-qt:
    name: Build Qt
    needs: build-zlib
    runs-on: windows-latest
    steps:
      - name: Restore zlib
        uses: actions/cache@v4
        with:
          path: zlib
          key: zlib-${{ env.zlib_ver }}-${{ github.ref_name }}
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v4
        with:
          path: qt
          key: qt-${{ env.qt_ver }}-${{ github.ref_name }}
      - name: Install Ninja and LLVM
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          choco install --no-progress ninja
          choco upgrade --no-progress llvm
      - name: Fetch Qt sources
        if: steps.cache-qt.outputs.cache-hit != 'true'
        run: |
          git clone --branch ${{ env.qt_ver }} --depth 1 https://code.qt.io/qt/qt5.git qt_source
          cd qt_source
          call .\init-repository.bat --quiet --no-optional-deps --module-subset=qtbase,qtsvg,qttools
      - name: Modify Qt sources
        if: steps.cache-qt.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sed -i 's/Q_OS_VXWORKS/_MSC_VER/g' qt_source/qtbase/src/corelib/global/qsystemdetection.h
      - name: Build Qt
        if: steps.cache-qt.outputs.cache-hit != 'true'
        env:
          CC: ${{ env.CLANG }}
          CXX: ${{ env.CLANG }}
          CFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D QT_NO_EXCEPTIONS
          CXXFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D QT_NO_EXCEPTIONS
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          mkdir qt_build
          cd qt_build
          call ..\qt_source\configure.bat -prefix "../qt" -release -static -platform win32-clang-msvc -no-sbom -ltcg -intelcet ^
            -disable-deprecated-up-to 0x060500 -no-vcpkg -submodules qtbase,qtsvg,qttools -nomake examples -nomake tests ^
            -no-dbus -no-glib -no-inotify -no-icu -system-zlib -no-system-proxies -no-fontconfig -no-gtk -no-opengl ^
            -no-xcb-xlib -no-sql-db2 -no-sql-ibase -no-sql-mysql -no-sql-oci -no-sql-odbc -no-sql-psql -no-sql-mimer ^
            -sql-sqlite -c++std c++20 -no-feature-printsupport -no-feature-testlib -no-feature-assistant -no-feature-qdoc ^
            -no-feature-designer -no-feature-distancefieldgenerator -no-feature-pixeltool -no-feature-qdbus -no-openssl ^
            -no-feature-qtattributionsscanner -no-feature-qtdiag -no-feature-qtplugininfo CMAKE_SYSTEM_VERSION=${{ env.winsdk_ver }} ^
            ZLIB_ROOT="../../zlib" ZLIB_USE_STATIC_LIBS=ON
          cmake --build . --parallel
          cmake --install .
  build-boost:
    name: Build Boost
    needs: delete-caches
    runs-on: windows-latest
    steps:
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v4
        with:
          path: boost
          key: boost-${{ env.boost_ver }}-${{ github.ref_name }}
      - name: Install Ninja and LLVM
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          choco install --no-progress ninja
          choco upgrade --no-progress llvm
      - name: Build Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        env:
          CC: ${{ env.CLANG }}
          CXX: ${{ env.CLANG }}
          CFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D _WIN32_WINNT=0x0A00
          CXXFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D _WIN32_WINNT=0x0A00
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          curl.exe --output boost.tar.gz --location "https://github.com/boostorg/boost/releases/download/boost-${{ env.boost_ver }}/boost-${{ env.boost_ver }}-cmake.tar.gz"
          tar xf boost.tar.gz
          mv boost-${{ env.boost_ver }} boost_source
          cd boost_source
          mkdir _build
          cd _build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_VERSION=${{ env.winsdk_ver }} -DCMAKE_INSTALL_PREFIX="../../boost" ^
            -DBOOST_ENABLE_PYTHON=OFF -DBOOST_INSTALL_LAYOUT=system -DBUILD_TESTING=OFF -DBUILD_SHARED_LIBS=OFF -DBOOST_LOCALE_ENABLE_ICU=OFF ^
            -DBOOST_LOCALE_ENABLE_ICONV=OFF -DBOOST_STACKTRACE_ENABLE_WINDBG=OFF -DBOOST_STACKTRACE_ENABLE_WINDBG_CACHED=OFF ^
            -DCMAKE_CXX_STANDARD=20 -DOPENSSL_ROOT_DIR="../../openssl"
          cmake --build . --parallel
          cmake --install .
  build-libtorrent:
    name: Build libtorrent
    needs: [build-openssl, build-boost]
    runs-on: windows-latest
    steps:
      - name: Restore OpenSSL
        uses: actions/cache@v4
        with:
          path: openssl
          key: openssl-${{ env.openssl_ver }}-${{ github.ref_name }}
      - name: Restore Boost
        uses: actions/cache@v4
        with:
          path: boost
          key: boost-${{ env.boost_ver }}-${{ github.ref_name }}
      - name: Cache libtorrent
        id: cache-libtorrent
        uses: actions/cache@v4
        with:
          path: libtorrent
          key: libtorrent-${{ env.libtorrent_ver }}-${{ github.ref_name }}
      - name: Install Ninja and LLVM
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          choco install --no-progress ninja
          choco upgrade --no-progress llvm
      - name: Build libtorrent
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        env:
          CC: ${{ env.CLANG }}
          CXX: ${{ env.CLANG }}
          CFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D NDEBUG
          CXXFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }} /D NDEBUG
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          git clone --branch RC_2_0 --depth 1 --recurse-submodules https://github.com/arvidn/libtorrent.git libtorrent_source
          cd libtorrent_source
          mkdir _build
          cd _build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_VERSION=${{ env.winsdk_ver }} -DCMAKE_CXX_STANDARD=20 ^
            -DCMAKE_INSTALL_PREFIX="../../libtorrent" -DBUILD_SHARED_LIBS=OFF -Dbuild_tests=OFF ^
            -Dbuild_examples=OFF -Dbuild_tools=OFF -Dpython-bindings=OFF -Dencryption=ON -Ddeprecated-functions=OFF ^
            -Dstatic_runtime=OFF -DOPENSSL_ROOT_DIR="${{ github.workspace}}\openssl" -DOPENSSL_USE_STATIC_LIBS=ON ^
            -DBOOST_ROOT="${{ github.workspace }}\boost"
          cmake --build . --parallel
          cmake --install .
  build-qbittorrent:
    name: Build qBittorrent
    needs: [build-qt, build-libtorrent]
    runs-on: windows-latest
    steps:
      - name: Restore zlib
        uses: actions/cache@v4
        with:
          path: zlib
          key: zlib-${{ env.zlib_ver }}-${{ github.ref_name }}
      - name: Restore OpenSSL
        uses: actions/cache@v4
        with:
          path: openssl
          key: openssl-${{ env.openssl_ver }}-${{ github.ref_name }}
      - name: Restore Qt
        uses: actions/cache@v4
        with:
          path: qt
          key: qt-${{ env.qt_ver }}-${{ github.ref_name }}
      - name: Restore Boost
        uses: actions/cache@v4
        with:
          path: boost
          key: boost-${{ env.boost_ver }}-${{ github.ref_name }}
      - name: Restore libtorrent
        uses: actions/cache@v4
        with:
          path: libtorrent
          key: libtorrent-${{ env.libtorrent_ver }}-${{ github.ref_name }}
      - name: Cache qBittorrent (if on main branch)
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: actions/cache@v4
        with:
          path: qbittorrent
          key: qbittorrent-${{ env.app_ver }}-${{ github.ref_name }}
          enableCrossOsArchive: true
      - name: Install Ninja and LLVM
        run: |
          choco install --no-progress ninja
          choco upgrade --no-progress llvm
      - name: Build qBittorrent
        env:
          CC: ${{ env.CLANG }}
          CXX: ${{ env.CLANG }}
          CFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }}
          CXXFLAGS: ${{ env.CFLAGS }} ${{ env.CLANG_FLAGS }}
        run: |
          call "${{ env.vcvarsall }}" amd64 ${{ env.winsdk_ver }}
          git clone --branch master --depth 1 https://github.com/qbittorrent/qBittorrent.git qbittorrent_source
          cd qbittorrent_source
          mkdir _build
          cd _build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_VERSION=${{ env.winsdk_ver }} -DCMAKE_CXX_STANDARD=20 ^
            -DCMAKE_INSTALL_PREFIX="../../qbittorrent" -DDBUS=OFF -DMSVC_RUNTIME_DYNAMIC=ON -DSTACKTRACE=OFF -DWEBUI=OFF ^
            -DZLIB_ROOT="${{ github.workspace }}\zlib" -DZLIB_USE_STATIC_LIBS=ON ^
            -DOPENSSL_ROOT_DIR="${{ github.workspace }}\openssl" -DOPENSSL_USE_STATIC_LIBS=ON ^
            -DBOOST_ROOT="${{ github.workspace }}\boost" -DCMAKE_PREFIX_PATH="${{ github.workspace }}\qt" ^
            -DLibtorrentRasterbar_DIR="${{ github.workspace }}\libtorrent\lib\cmake\LibtorrentRasterbar"
          cmake --build . --parallel
          cmake --install .
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qBittorrent-${{ env.app_ver }}
          path: qbittorrent
  release:
    name: Create release (if on main branch)
    needs: build-qbittorrent
    if: ${{ github.ref == 'refs/heads/main' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Restore qBittorrent
        uses: actions/cache@v4
        with:
          path: qbittorrent
          key: qbittorrent-${{ env.app_ver }}-${{ github.ref_name }}
          enableCrossOsArchive: true
      - name: Create release
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ env.app_ver }} --repo ${{ github.repository }}
          gh release upload ${{ env.app_ver }} --repo ${{ github.repository }} qbittorrent/bin/qbittorrent.exe
